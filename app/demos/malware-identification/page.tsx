// app/demos/malware-identification/page.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
// import { AlertCircle } from "lucide-react";

type Scenario = {
  description: string;
  options: string[];
  answer: number;
};

const scenarios: Scenario[] = [
  {
    description:
      "Your computer is running unusually slow, and you notice new toolbars in your web browser that you didn't install.",
    options: [
      "It's normal behavior, no need to worry.",
      "Possible malware infection.",
      "Your computer needs an update.",
    ],
    answer: 1,
  },
  {
    description:
      "Pop-up ads appear even when your browser is closed, and your homepage has changed without your consent.",
    options: [
      "It's a glitch, restart your computer.",
      "Ignore it; it'll go away.",
      "Signs of adware or malware infection.",
    ],
    answer: 2,
  },
  // Add more scenarios as needed
];

export default function MalwareIdentification() {
  const [currentScenario, setCurrentScenario] = useState<number>(0);
  const [selectedOption, setSelectedOption] = useState<number | null>(null);
  const [feedback, setFeedback] = useState("");
  const [score, setScore] = useState<number>(0);

  const scenario = scenarios[currentScenario];

  const handleOptionSelect = (index: number) => {
    setSelectedOption(index);
  };

  const submitAnswer = () => {
    if (selectedOption === scenario.answer) {
      setFeedback("Correct!");
      setScore(score + 1);
    } else {
      setFeedback("Incorrect.");
    }
  };

  const nextScenario = () => {
    setFeedback("");
    setSelectedOption(null);
    if (currentScenario + 1 < scenarios.length) {
      setCurrentScenario(currentScenario + 1);
    } else {
      // Challenge finished
      setCurrentScenario(-1);
    }
  };

  return (
    <div className="p-6 max-w-xl mx-auto">
      {currentScenario !== -1 ? (
        <>
          <h1 className="text-2xl font-bold mb-5">
            Malware Identification Challenge
          </h1>
          <p className="mb-4">{scenario.description}</p>
          <div className="mb-4">
            {scenario.options.map((option, index) => (
              <label key={index} className="block mb-2">
                <input
                  type="radio"
                  name="option"
                  checked={selectedOption === index}
                  onChange={() => handleOptionSelect(index)}
                  className="mr-2"
                />
                {option}
              </label>
            ))}
          </div>
          {!feedback ? (
            <Button onClick={submitAnswer} disabled={selectedOption === null}>
              Submit Answer
            </Button>
          ) : (
            <div>
              <p className="mb-4">{feedback}</p>
              <Button onClick={nextScenario}>Next Scenario</Button>
            </div>
          )}
        </>
      ) : (
        <div>
          <h1 className="text-2xl font-bold mb-5">Challenge Completed!</h1>
          <p>
            Your score: {score} / {scenarios.length}
          </p>
        </div>
      )}
    </div>
  );
}
